#Создай собственный Шутер!
from random import *
from pygame import *
class GameSprite(sprite.Sprite):
#конструктор класса
    def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
#вызываем конструктор класса (Sprite):
        sprite.Sprite.__init__(self)
#каждый спрайт должен хранить свойство image - изображение
        self.image = transform.scale(image.load(player_image), (size_x, size_y))
        self.speed = player_speed
#каждый спрайт должен хранить свойство rect - прямоугольник, в который он вписан
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
#метод, отрисовывающий героя на окне
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

class Player(GameSprite):
#метод для управления спрайтом стрелками клавиатуры
    def update(self):
        keys = key.get_pressed()
        if keys[K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_RIGHT] and self.rect.x < win_width - 80:
            self.rect.x += self.speed
#метод "выстрел" (используем место игрока, чтобы создать там пулю)
    def fire(self):
        bullet = Bullet("bullet.png", self.rect.centerx, self.rect.top, 15, 20, -15)
        bullets.add(bullet)
        fire_sound.play()


#класс спрайта-врага
class Enemy(GameSprite):
#движение врага
    def update(self):
        self.rect.y += self.speed
        global lost
#исчезает, если дойдёт до края экрана
        if self.rect.y > win_height:
            self.rect.x = randint(80, win_width - 80)
            self.rect.y = 0
            lost = lost + 1
#класс спрайта-пули
class Bullet(GameSprite):
# движение врага
    def update(self):
        self.rect.y += self.speed
# исчезает, если дойдет до края экрана
        if self.rect.y < 0:
            self.kill()

#создаём окошко
win_width = 700
win_height = 500
display.set_caption("Shooter")
window = display.set_mode((win_width, win_height))
background = transform.scale(image.load('galaxy.jpg'), (win_width, win_height))
#создаём спрайты
ship = Player("rocket.png", 5, win_height - 100, 80, 100, 10)
#создание группы спрайтов-врагов
monsters = sprite.Group()
for i in range(1, 6):
    monster = Enemy("ufo.png", randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
    monsters.add(monster)
bullets = sprite.Group()
#переменная "игра закончилась": как только там True, в основном цикле перестают работать спрайты
finish = False
lost = 0
score = 0
max_lost = 3
font.init()
font1 = font.Font(None,75)
font2 = font.Font(None,30)
#основной цикл игры:
run = True #флаг сбрасывается кнопкой закрытия окна
mixer.init()
fire_sound = mixer.Sound("fire.ogg")
while run:
    for e in event.get():
        if e.type == QUIT:
            run = False
        elif e.type == KEYDOWN:
            if e.key == K_SPACE:
                ship.fire()
    if not finish:
        window.blit(background,(0,0))
        ship.update()
        monsters.update()
        bullets.update()
        ship.reset()
        monsters.draw(window)
        bullets.draw(window)
        collides = sprite.groupcollide(monsters, bullets, True, True)
        for c in collides:
            score = score + 1
            monster = Enemy('ufo.png', randint(80,win_width - 80), -40, 80, 50, randint(1,5))
            Enemy.add(monster)
        if sprite.spritecollide(ship,monsters, False) or lost >= max_lost:
            finish = True
            
        text = font2.render('Счет: ' + str(score), 1, (255,255,255))
        window.blit(text, (10,20))
        text_lose = font2.render('Пропущенно: ' + str(lost), 1, (255,255,255))
        window.blit(text_lose, (10, 50))
        display.update()